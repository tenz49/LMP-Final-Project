import os
import numpy as np
import torch
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import Dataset, DataLoader
from PIL import Image
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt


# Step 1: Define your dataset class and apply transformations
class CollagenDataset(Dataset):
    def __init__(self, image_paths, labels, transform=None):
        self.image_paths = image_paths
        self.labels = labels
        self.transform = transform


    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        image = Image.open(self.image_paths[idx])
        label = self.labels[idx]
        if self.transform:
            image = self.transform(image)
        return image, label


# Step 2: Load image paths and labels
image_folder = '/Users/sophia/Desktop/AFM image'
image_files = sorted([f for f in os.listdir(image_folder) if f.endswith('.png')])
image_paths = [os.path.join(image_folder, f) for f in image_files]
labels = np.concatenate([np.ones(50), np.zeros(50)])

# Step 3: Split your dataset
train_val_images, test_images, train_val_labels, test_labels = train_test_split(image_paths, labels, test_size=0.2, random_state=42)
train_images, val_images, train_labels, val_labels = train_test_split(train_val_images, train_val_labels, test_size=1/8, random_state=42)

# Step 4: Data resize and to tensor
transform_train = transforms.Compose([
    transforms.Resize((51, 51)),
    transforms.ToTensor(),
])

transform_test = transforms.Compose([
    transforms.Resize((51, 51)),
    transforms.ToTensor(),
])

# Step 5: Create dataset objects and data loaders
train_dataset = CollagenDataset(train_images, train_labels, transform=transform_train)
val_dataset = CollagenDataset(val_images, val_labels, transform=transform_test)
test_dataset = CollagenDataset(test_images, test_labels, transform=transform_test)

batch_size = 4
num_workers = 0
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=num_workers)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=num_workers)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=num_workers)

# Step 6: Load pre-trained VGG model
mps_device = torch.device("mps")
model = torchvision.models.vgg16(weights=None)
# Load the weights from the local file
weights_path = '/Users/sophia/Downloads/vgg16-397923af.pth'
model.load_state_dict(torch.load(weights_path))
model.classifier[-1] = torch.nn.Linear(model.classifier[-1].in_features, 2)
model.to(mps_device)

# Step 7: Train the VGG model and obtain training accuracy
criterion = torch.nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
#lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)

num_epochs = 25
start_time = time.time()
train_losses, val_losses, train_accuracies, val_accuracies = [], [], [], []
for epoch in range(num_epochs):
    # Training
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0
    for images, labels in train_loader:
        images, labels = images.to(torch.float32).to(mps_device), labels.to(torch.float32).to(mps_device)

        #print("Image size:", images.size())

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels.long())
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()

    train_loss = running_loss / len(train_loader)
    train_acc = correct / total
    train_losses.append(train_loss)
    train_accuracies.append(train_acc)

    # Validation
    model.eval()
    running_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for images, labels in val_loader:
            images, labels = images.to(torch.float32).to(mps_device), labels.to(torch.float32).to(mps_device)

            outputs = model(images)
            loss = criterion(outputs, labels.long())

            running_loss += loss.item()
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()

    val_loss = running_loss / len(val_loader)
    val_acc = correct / total
    val_losses.append(val_loss)
    val_accuracies.append(val_acc)

    print(f"Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.4f}, Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.4f}")

# Step 8: Plot the results
epochs = range(1, num_epochs + 1)

plt.figure()
plt.plot(epochs, train_losses, label="Training Loss")
plt.plot(epochs, val_losses, label="Validation Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.show()

plt.figure()
plt.plot(epochs, train_accuracies, label="Training Accuracy")
plt.plot(epochs, val_accuracies, label="Validation Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.show()
